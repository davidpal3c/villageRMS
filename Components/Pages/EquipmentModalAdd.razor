


<!-- Add New Rental Equipment -->
<div class="form-group">
    <label class="form-label mt-2" for="nm">Equipment Name</label>
    <input type="text" @bind="_name" class="form-control"/>
</div>
<div class="form-group">
    <label class="form-label mt-2" for="cat">CategoryId</label>
    <input type="text" @bind="_category" class="form-control"/>
</div>
<div class="form-group">
    <label class="form-label mt-2" for="desc">Description</label>
    <input type="text" @bind="_description" class="form-control"/>
</div>
<div class="form-group">
    <label class="form-label mt-2" for="dailyc">Daily Cost</label>
    <input type="text" @bind="_dailyCost" class="form-control"/>
</div>

<Button class="mt-3 btn btn-primary" Type="ButtonType.Button" @onclick="HandleClick">
    Submit
</Button>

@code {
    [Parameter] public EventCallback<List<object>> OnClickCallback { get; set; }

    private string? _name;
    private string? _category;
    private string? _description;

    private string? _dailyCost;
    private double? _dailyCostDouble;

    private List<object> returnVal { get; set; } = new List<object>();



    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task HandleClick()
    {
        try
        {           
            returnVal.Clear();

            if (!string.IsNullOrEmpty(_name)) returnVal.Add(_name);
            if (double.TryParse(_category, out double _categoryInt))
            {
                returnVal.Add(_categoryInt);
            }
            else
            {
                throw new Exception("Invalid daily cost format.");
            }

             
            if (!string.IsNullOrEmpty(_description)) returnVal.Add(_description);
            if (double.TryParse(_dailyCost, out double _dailyCostDouble))
            {
                returnVal.Add(_dailyCostDouble);
            }
            else
            {
                throw new Exception("Invalid daily cost format.");
            }
            
            
            await OnClickCallback.InvokeAsync(returnVal);

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
        
    }
}
