@using VillageRMS.Models

<!-- Add New Rental Equipment -->

<div class="form-group">
    <label class="form-label mt-2" for="eid">Equipment Id</label>
    <input type="number" @bind="_id" class="form-control" id="eid" />
</div>

<div class="form-group">
    <label class="form-label mt-2" for="nm">Equipment Name</label>
    <input type="text" @bind="_name" class="form-control" id="nm"/>
</div>

<div class="form-group">
    <label class="form-label mt-2" for="deptSelector">Category</label>
    <select class="form-select" id="deptSelector" @onchange="HandleCategoryChange">
        <option value="">Category</option>
        @foreach (var c in CategoryLookup)
        {
            <option value="@c.CategoryId">@c.CategoryDescription</option>
        }
    </select>
</div>
<div class="form-group">
    <label class="form-label mt-2" for="desc">Description</label>
    <input type="text" @bind="_description" class="form-control"/>
</div>
<div class="form-group">
    <label class="form-label mt-2" for="dailyc">Daily Cost</label>
    <input type="text" @bind="_dailyCost" class="form-control"/>
</div>

<Button class="mt-3 btn btn-primary" Type="ButtonType.Button" @onclick="HandleClick">
    Submit
</Button>

@code {
    [Parameter] public EventCallback<List<object>> OnClickCallback { get; set; }
    [Parameter] public List<RentalCategory> CategoryLookup { get; set; }

    private int? _id;
    private string? _name;
    private int? _category;
    private string? _description;

    private string? _dailyCost;
    private double? _dailyCostDouble;

    private List<object> returnVal { get; set; } = new List<object>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task HandleClick()
    {
        try
        {           
            returnVal.Clear();


            if (_id != null)
            {
                returnVal.Add(_id);
            }
            else
            {
                return; // when error, return do nothing
            }


            

            

            if (_category != null)
            {
                returnVal.Add(_category);
            } else
            {
                return; // when error, return do nothing
            }

            if (!string.IsNullOrEmpty(_name)) returnVal.Add(_name);


            if (!string.IsNullOrEmpty(_description)) returnVal.Add(_description);
            if (double.TryParse(_dailyCost, out double _dailyCostDouble))
            {
                returnVal.Add(_dailyCostDouble);
            }
            else
            {
                return; // when error, return do nothing
            }


            await OnClickCallback.InvokeAsync(returnVal);

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }

    }

    private void HandleCategoryChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var catId))
        {
            _category = catId;
        }
        else
        {
            // not int
        }
    }
}
