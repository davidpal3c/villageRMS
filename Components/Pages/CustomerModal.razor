<!-- Add New Customer -->
<div class="form-group">
    <label class="form-label mt-2" for="fn">First Name</label>
    <input type="text" @bind="_firstName" class="form-control" id="fn" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="ln">Last Name</label>
    <input type="text" @bind="_lastName" class="form-control" id="ln" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="phone">Phone</label>
    <input type="text" @bind="_phone" class="form-control" id="phone" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="email">Email</label>
    <input type="text" @bind="_email" class="form-control" id="email" />
</div>

<Button class="mt-3 btn btn-primary" Type="ButtonType.Button" @onclick="HandleClick">
    Submit
</Button>

@code {
    [Parameter] public EventCallback<List<string>> OnClickCallback { get; set; }

    private string? _firstName;
    private string? _lastName;
    private string? _phone;
    private string? _email;
    private List<string> returnVal { get; set; } = new List<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task HandleClick()
    {
        returnVal.Clear();
        if (!string.IsNullOrEmpty(_firstName)) returnVal.Add(_firstName);
        if (!string.IsNullOrEmpty(_lastName)) returnVal.Add(_lastName);
        if (!string.IsNullOrEmpty(_phone)) returnVal.Add(_phone);
        if (!string.IsNullOrEmpty(_email)) returnVal.Add(_email);

        await OnClickCallback.InvokeAsync(returnVal);
    }
}
