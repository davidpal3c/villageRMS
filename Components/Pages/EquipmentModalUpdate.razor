@using Models
@using Services
@using Microsoft.AspNetCore.Components.Forms

<!-- Update Equipment -->

<EditForm Model="equipment" OnValidSubmit="HandleClick">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="form-label mt-2" for="fn">Equipment Name</label>
        <InputText @bind-Value="equipment.Name" class="form-control" id="equip-name" />
        <ValidationMessage For="@(() => equipment.Name)" />
    </div>
    <div class="form-group">
        <label class="form-label mt-2" for="ln">CategoryId</label>
        <InputNumber @bind-Value="equipment.CategoryId" class="form-control" id="cat-id" />
        <ValidationMessage For="@(() => equipment.CategoryId)" />
    </div>
    <div class="form-group">
        <label class="form-label mt-2" for="phone">Description</label>
        <InputText @bind-Value="equipment.Description" class="form-control" id="equip-descrip" />
        <ValidationMessage For="@(() => equipment.Description)" />
    </div>
    <div class="form-group">
        <label class="form-label mt-2" for="email">Daily Cost</label>
        <InputNumber @bind-Value="equipment.Daily_rental_cost" class="form-control" id="email" />
        <ValidationMessage For="@(() => equipment.Daily_rental_cost)" />
    </div>

    <p>Debug: @equipment?.Name - @equipment?.CategoryId - @equipment?.Description - @equipment?.Daily_rental_cost</p>

    <Button class="mt-3 btn btn-primary" Type="ButtonType.Submit">
        Update
    </Button>
</EditForm>

@code {
    [Parameter] public RentalEquipment Equipment { get; set; } = new RentalEquipment();
    [Parameter] public EventCallback<RentalEquipment> OnClickCallback { get; set; }

    private RentalEquipment equipment;

    protected override void OnParametersSet()
    {
        equipment = Equipment;
        base.OnParametersSet();
    }

    private async Task LoadCategory(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int categoryId))
        {
            //await equipment.LoadCategoryById(categoryId);

            StateHasChanged();
        }
    }

    private async Task HandleClick()
    {
        try
        {
            Console.WriteLine($"Updated Equipment: {equipment.Name}, {equipment.CategoryId}, {equipment.Description}, {equipment.Daily_rental_cost}");
            await OnClickCallback.InvokeAsync(equipment);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
}