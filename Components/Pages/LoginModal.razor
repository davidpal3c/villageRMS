@using VillageRMS.Exceptions
<div class="new-modal" tabindex="-1" style="display:@(Visible ? "block" : "none")" aria-hidden="@(!Visible)">
    <div class="modal-dialog new-modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body d-flex flex-column align-items-center justify-content-center" style="height: 100%;">
                <div class="w-100" style="max-width: 376px;">
                    <div class="text-right mb-4 mt-2 text-end">
                        <!--<button type="button" class="close ml-auto" onclick="Close">
                            <span>&times;</span>
                        </button>-->
                    </div>
                        
                    <div class="text-center mb-4">
                        <h5>Welcome to</h5>
                        <h1>Village RMS</h1>
                    </div>
                    
                    <form>
                        <div class="form-group">
                            <label for="username">Username</label>
                            <input type="text" id="username" @bind="Username" class="form-control" placeholder="Username" />
                        </div>
                        <div class="form-group mt-3">
                            <label for="password">Password</label>
                            <input type="password" id="password" @bind="Password" class="form-control" placeholder="Password" />
                        </div>
                        <div class="form-group mt-4">
                            <button type="button" class="btn btn-primary " style="width: 138px;" @onclick="Login">Login</button>
                        </div>
                        <div class="mt-5">
                            <p class="text-warning">@statusMsg</p>
                        </div>
                    </form>
                </div>
            </div>
        </div>

    </div>
</div>


@code {
    private bool _visible;

    private string statusMsg = "demo: use admin / password";
    private string textstyle = "text-success";

    [Parameter]
    public bool Visible
    {
        get => _visible;
        set
        {
            if (_visible != value)
            {
                _visible = value;
                VisibleChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback<bool> OnLoginSuccess { get; set; }

    private string Username { get; set; }
    private string Password { get; set; }

    private void Close()
    {
        Visible = false;
    }

    private async Task Login()
    {
        try
        {
            // temp login logic
            bool success = !string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(Password);
            if (success)
            {
                // replace with db validation here
                success = (Username == "admin" && Password == "password");
                if (success)
                {
                    await OnLoginSuccess.InvokeAsync(true);
                    statusMsg = String.Empty;
                    Close();
                }
                else
                {
                    throw new InvalidLoginException("Incorrect Username or Password!");
                }
            }
            else
            {
                throw new InvalidLoginException("Username and Password cannot be blank!");
            }
        }
        catch (InvalidLoginException e)
        {
            textstyle = "text-danger";
            statusMsg = e.Message;
        } catch (Exception e)
        {
            textstyle = "text-danger";
            statusMsg = e.Message;
        }

    }
}
