@page "/rentals"
@using Models
@inject Services.DatabaseService DatabaseService

<h1>Rentals</h1>
<p>@msg</p>
@if (@testMsg != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @testMsg
        <button type="button" class="closee" aria-label="Close" @onclick="CloseMessage">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (rentals_list.Count == 0)
{
    <p><em>There are no rental items at this time.</em></p>
}
else
{

    <div class="nav-header">
        <div>
            <form @onsubmit="FilterRentals">
                <input type="text" @bind="name" class="search-field" placeholder="Search Rentals" />
                <button type="submit" class="btn btn-dark"><i class="bi bi-search"></i></button>
            </form>
        </div>

        <div>
            <button type="submit" class="btn btn-success" @onclick="ShowRentalAddModal">
                <i class="bi bi-plus-lg"></i>
            </button>
        </div>

        <div>
            <button type="submit" class="btn btn-secondary" @onclick="RefreshList">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <Modal @ref="modal" />

    <table class="table new-table">
        <thead>
            <tr class="thead-tr">
                <th>ID</th>
                <th>Date</th>
                <th>Customer</th>
                <th>Equipment</th>
                <th>Rental Date</th>
                <th>Return Date</th>
                <th>Cost</th>
                <th>Edit/Delete</th>
            </tr>
        </thead>
        <tbody>
            @if(filteredData.Count > 0)
            {
            @foreach (Rental search in filteredData)
            {
                <tr>
                    <td>@search.RentalId</td>
                    <td>@search.CurrentDate</td>
                    <td>@search.CustomerName</td>
                    <td>@search.EquipmentName</td>
                    <td>@search.RentalDate</td>
                    <td>@search.ReturnDate</td>
                    <td>@search.Cost</td>
                    <td>
                        <button type="submit" class="btn btn-primary" @onclick="() => ShowRentalUpdateModal(search)">
                            <i class="bi bi-pencil-square"></i>
                        </button>

                    </td>
                    </tr>
                }
            }
            else
            {
                @foreach (Rental rental in rentals_list)
                {
                    <tr>
                    <td>@rental.RentalId</td>
                    <td>@rental.CurrentDate</td>
                    <td>@rental.CustomerName</td>
                    <td>@rental.EquipmentName</td>
                    <td>@rental.RentalDate</td>
                    <td>@rental.ReturnDate</td>
                    <td>@rental.Cost</td>
                    <td>
                        <button type="submit" class="btn btn-primary" @onclick="() => ShowRentalUpdateModal(rental)">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                    </td>
                    </tr>
                }
                }
        </tbody>
    </table>
}

@code {
    private List<Rental> rentals_list = new List<Rental>();
    private Modal modal = default!;
    private bool showDeleteConfirmation = false;
    private string? testMsg;

    private string msg = String.Empty;

    private List<Rental> filteredData = new List<Models.Rental>();
    private List<Rental>? result = new List<Rental>();
    private string? searchStr;
    private string? name;



    protected override async Task OnInitializedAsync()
    {
        if (DatabaseService.isSuccessfulConnection())
        {
            msg = "";
        }
        else
        {
            msg = "Open ssh tunnel or reconfigure connection string at MauiProgram.cs";
        }

        //custList = await DatabaseService.GetCustomers();
        await RefreshList();
    }

    private void CloseMessage()
    {
        testMsg = null;
    }


    private void FilterRentals()
    {
        if (rentals_list == null || !rentals_list.Any())
        {
            return;
        }


        result = new List<Models.Rental>();


        foreach (Models.Rental rental in rentals_list)
        {
            bool match = true;

            if (!string.IsNullOrEmpty(searchStr) &&
                !(rental.CustomerName.Contains(searchStr, StringComparison.OrdinalIgnoreCase) ||
                rental.EquipmentName.Contains(searchStr, StringComparison.OrdinalIgnoreCase)))
            {
                match = false;
            }

            if (match)
            {
                result.Add(rental);
            }

        }
        filteredData = result;
    }

    private async Task RefreshList()
    {
        try
        {
            rentals_list = await DatabaseService.GetRentals();
            filteredData = null;
        }
        catch (Exception e)
        {
            testMsg = $"Error during refresh: {e.Message}";
        }
    }

    


    //AddModal start
    private async Task ShowRentalAddModal()
    {
        try
        {
            var parameters = new Dictionary<string, object>
            {
                { "OnClickCallback", EventCallback.Factory.Create<List<object>>(this, TestSuccessCallbackAdd) }
            };

            await modal.ShowAsync<RentalModalAdd>(title: "New Rental", parameters: parameters);

        }
        catch(Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
    }


    private async Task TestSuccessCallbackAdd(List<object> rentalData)
    {
        try
        {
            testMsg = $"New rental data added successfully!";
            await DatabaseService.AddRental(rentalData);
            await RefreshList();
            await modal.HideAsync();
        }
        catch (Exception e)
        {
            testMsg = $"An error occurred: adding{e.Message}";
        }
    }



    private async Task ShowRentalUpdateModal(Rental rental)
    {
        try
        {
            var parameters = new Dictionary<string, object>
            {
                { "Rental", rental },
                { "OnClickCallback", EventCallback.Factory.Create<Rental>(this, TestSuccessCallbackUpdate)}
            };

            await modal.ShowAsync<UpdateRentalModal>(title: "Update Rental", parameters: parameters);
        }
        catch(Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
    }



    private async Task TestSuccessCallbackUpdate(Rental updatedRental)
    {
        try
        {

            testMsg = $"Rental information (RentalID: {updatedRental.RentalId}) updated successfully";

            await DatabaseService.UpdateRental(updatedRental);
            await RefreshList();
            await modal.HideAsync();
        }
        catch (Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
    }


}
