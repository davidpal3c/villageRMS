<h3>UpdateRentalModal</h3>

<div class="form-group">
    <label class="form-label mt-2" for="currentdate">Current Date</label>
    <input type="text" @bind="_currentDate" class="form-control" id="currentdate" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="customer">Customer</label>
    <input type="number" @bind="_customerId" class="form-control" id="customer" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="equipment">Equipment</label>
    <input type="number" @bind="_equipmentId" class="form-control" id="equipment" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="rentaldate">Rental Date</label>
    <input type="text" @bind="_rentalDate" form-control" id="rentaldate" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="returndate">Return Date</label>
    <input type="text" @bind="_returnDate" class="form-control" id="returndate" />
</div>

<Button class="mt-3 btn btn-primary" Type="ButtonType.Button" @onclick="HandleClick">
    Submit
</Button>


@code {

    [Parameter] public EventCallback<List<object>> OnClickCallback { get; set; }

    private DateTime? _currentDate;
    private int? _customerId;
    private int? _equipmentId;
    private DateTime? _rentalDate;
    private DateTime? _returnDate;
    private List<object> returnVal { get; set; } = new List<object>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task HandleClick()
    {
        returnVal.Clear();
        if (_currentDate != null) returnVal.Add(_currentDate);
        if (_customerId != null) returnVal.Add(_customerId);
        if (_equipmentId != null) returnVal.Add(_equipmentId);
        if (_rentalDate != null) returnVal.Add(_rentalDate);
        if (_returnDate != null) returnVal.Add(_returnDate);

        await OnClickCallback.InvokeAsync(returnVal);
    }
}
