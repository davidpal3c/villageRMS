@using Models
@using Services
@using Microsoft.AspNetCore.Components.Forms

<!-- Update Rental -->

<EditForm Model="rental" OnValidSubmit="HandleClick">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="form-label mt-2" for="rentalid">Rental Id</label>
        <InputNumber @bind-Value="rental.RentalId" class="form-control" id="rentalid" readonly/>
        <ValidationMessage For="@(() => rental.RentalId)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="currentdate">Current Date</label>
        <InputDate @bind-Value="rental.CurrentDate" class="form-control" id="currentdate" />
        <ValidationMessage For="@(() => rental.CurrentDate)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="customer">Customer</label>
        <InputNumber @bind-Value="rental.CustomerId" class="form-control" id="customer" />
        <ValidationMessage For="@(() => rental.CustomerId)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="equipment">Equipment</label>
        <InputNumber @bind-Value="rental.EquipmentId" class="form-control" id="equipment" />
        <ValidationMessage For="@(() => rental.EquipmentId)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="rentaldate">Rental Date</label>
        <InputDate @bind-Value="rental.RentalDate" class="form-control" id="rentaldate" />
        <ValidationMessage For="@(() => rental.RentalDate)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="status">Return Date</label>
        <InputDate @bind-Value="rental.ReturnDate" class="form-control" id="status" />
        <ValidationMessage For="@(() => rental.ReturnDate)" />
    </div>

    <Button class="mt-3 btn btn-primary" Type="ButtonType.Submit">
        Update Rental
    </Button>
</EditForm>

@code {
    private Rental rental;
    [Parameter] public Rental Rental { get; set; } = new Rental();
    [Parameter] public EventCallback<Rental> OnClickCallback { get; set; }
   
    protected override void OnParametersSet()
    {
        rental = Rental;
        base.OnParametersSet();
    }

    private async Task HandleClick()
    {
        try
        {
            await OnClickCallback.InvokeAsync(rental);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

}