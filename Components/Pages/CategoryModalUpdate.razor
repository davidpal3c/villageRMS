@using Models
@using Services
@using Microsoft.AspNetCore.Components.Forms

<!-- Update Category -->

<EditForm Model="category" OnValidSubmit="HandleClick">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="form-label mt-2" for="id">Category Id</label>
        <InputNumber @bind-Value="category.CategoryId" class="form-control" id="id" readonly />
        <ValidationMessage For="@(() => category.CategoryId)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="description">Category Description</label>
        <InputText @bind-Value="category.CategoryDescription" class="form-control" id="description" />
        <ValidationMessage For="@(() => category.CategoryDescription)" />
    </div>

    <Button class="mt-3 btn btn-primary" Type="ButtonType.Submit">
        Update Category
    </Button>
</EditForm>

@code {
    private RentalCategory category;
    [Parameter] public RentalCategory Category { get; set; } = new RentalCategory();
    [Parameter] public EventCallback<RentalCategory> OnClickCallback { get; set; }

    protected override void OnParametersSet()
    {
        category = Category;
        base.OnParametersSet();
    }

    private async Task HandleClick()
    {
        try
        {
            await OnClickCallback.InvokeAsync(category);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

}
