@page "/customers"
@using Models
@inject Services.DatabaseService DatabaseService


<h1>Customers</h1>
<p>@msg</p>
@if (@testMsg != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @testMsg
        <button type="button" class="closee" aria-label="Close" @onclick="CloseMessage">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (custList == null)
{
    <p><em>Loading...</em></p>
}
else
{  
    <div class="nav-header"> 
        <div>
            <form @onsubmit="FilterCustomers">
                <input type="search" @bind="name" class="search-field" placeholder="Search Customers" @bind:event="oninput" @bind:after="FilterCustomers" />
                <button type="submit" class="btn btn-dark"><i class="bi bi-search"></i></button>
            </form>
        </div>

        <div>            
            <button type="submit" class="btn btn-success" @onclick="ShowCustomerAddModal">
                <i class="bi bi-plus-lg"></i>
            </button>
        </div>

        <div>
            <button type="submit" class="btn btn-secondary" @onclick="RefreshList">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <Modal @ref="modal" />
    <table class="table new-table">
        <thead>
            <tr class="thead-tr">
                <th>ID</th>
                <th>Name</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Status</th>
                <th>Edit/Delete</th>
            </tr>
        </thead>
        <tbody>

            @if (filteredData != null)
            {
                @foreach (Customer c in filteredData)
                {
                    <tr>
                        <td>@c.CustomerId.ToString()</td>
                        <td>@c.LastName , @c.FirstName</td>
                        <td>@c.PhoneNumber</td>
                        <td><a href="mailto:@c.EmailAddress">@c.EmailAddress</a></td>
                        <td>@c.Status</td>
                        <td>
                            <button type="submit" class="btn btn-primary" @onclick="() => ShowCustomerUpdateModal(c)">
                                <i class="bi bi-pencil-square"></i>
                            </button>

                            <button type="submit" class="btn btn-danger" @onclick="() => ShowDeleteConfirmationModal(c)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                @foreach (Customer c in custList)
                {
                    <tr>
                        <td>@c.CustomerId.ToString()</td>
                        <td>@c.LastName , @c.FirstName</td>
                        <td>@c.PhoneNumber</td>
                        <td><a href="mailto:@c.EmailAddress">@c.EmailAddress</a></td>
                        <td>@c.Status</td>
                        <td>
                            <button type="submit" class="btn btn-primary" @onclick="() => ShowCustomerUpdateModal(c)">
                                <i class="bi bi-pencil-square"></i>
                            </button>

                            <button type="submit" class="btn btn-danger" @onclick="() => ShowDeleteConfirmationModal(c)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
    
}


@code {
    //for modal
    private Modal modal = default!;    
    private bool showDeleteConfirmation = false;
    private string? testMsg;

    private string msg = String.Empty;
    private List<Customer>? custList;

    private List<Customer>? filteredData = new List<Customer>();
    private List<Customer>? result;

    private string? name;


    protected override async Task OnInitializedAsync()
    {
        if (DatabaseService.isSuccessfulConnection())
        {
          
        }
        else
        {
            testMsg = "Open ssh tunnel or reconfigure connection string at MauiProgram.cs";
        }

        //custList = await DatabaseService.GetCustomers();
        await RefreshList();
    }

    private void CloseMessage()
    {
        testMsg = null;
    }


    private void FilterCustomers()
    {
        if (custList == null || !custList.Any())
        {
            return;
        }

        result = new List<Models.Customer>();

        foreach (Models.Customer customer in custList)
        {
            bool match = true;

            if (!string.IsNullOrEmpty(name) &&
                !(customer.FirstName.Contains(name, StringComparison.OrdinalIgnoreCase) ||
                  customer.LastName.Contains(name, StringComparison.OrdinalIgnoreCase)))
            {
                match = false;
            }

            if (match)
            {
                result.Add(customer);
            }

        }
        filteredData = result;
    }

    private async Task RefreshList()
    {
        try
        {
            custList = await DatabaseService.GetCustomers();
            filteredData = null;
        }
        catch (Exception e)
        {
            testMsg = $"Error during refresh: {e.Message}";
        }
    }


    //AddModal start
    private async Task ShowCustomerAddModal()
    {
        var parameters = new Dictionary<string, object>
        {
            { "OnClickCallback", EventCallback.Factory.Create<List<string>>(this, TestSuccessCallbackAdd) }
        };

        await modal.ShowAsync<CustomerModalAdd>(title: "New Customer", parameters: parameters);
    }


    private async Task TestSuccessCallbackAdd(List<string> newCustData)
    {
        try
        {
            testMsg = $"New customer \"{newCustData[0]}\" was added successfully!";
            await DatabaseService.AddNewCustomer(newCustData);
            await RefreshList();
            await modal.HideAsync();
        } 
        catch (Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
    }



    private async Task ShowCustomerUpdateModal(Customer customer)
    {
        var parameters = new Dictionary<string, object>
        {
            { "Customer", customer }, 
            { "OnClickCallback", EventCallback.Factory.Create<Customer>(this, TestSuccessCallbackUpdate)}
        };

        await modal.ShowAsync<CustomerModalUpdate>(title: "Update Customer", parameters: parameters);
    }



    private async Task TestSuccessCallbackUpdate(Customer updatedCustomer)
    {
        try
        {
            testMsg = $"{updatedCustomer.FirstName} {updatedCustomer.LastName} was updated successfully!";
            await DatabaseService.UpdateCustomer(updatedCustomer);
            await RefreshList();
            await modal.HideAsync();
        }
        catch (Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
    }



    private async Task ShowDeleteConfirmationModal(Customer customer)
    {        
        showDeleteConfirmation = true;

        var parameters = new Dictionary<string, object>
        {
            { "Customer", customer },
            { "OnClickCallback", EventCallback.Factory.Create<(Customer, bool)>(this, ConfirmCallbackDelete) }
        };

        await modal.ShowAsync<CustomerModalDelete>(title: "Delete Customer", parameters: parameters);
    }



    private async Task ConfirmCallbackDelete((Customer customer, bool confirmed) args)
    {
        var (customer, confirmed) = args;

        try
        {

            if (confirmed)
            {                
                await DatabaseService.DeleteCustomer(customer);
                testMsg = $"{customer.FirstName} {customer.LastName} was deleted successfully!";
                await RefreshList();                
            }
            else
            {
                //customer = null;
                testMsg = "Customer deletion was canceled.";
                await RefreshList();                
            }

            await modal.HideAsync();

        }
        catch (Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
        finally
        {
            showDeleteConfirmation = false;
        }
    }

}
