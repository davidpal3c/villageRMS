@page "/ReportSalesByDate"
@using Models
@inject Services.DatabaseService DatabaseService

<h3>Sales By Date</h3>
@if (selectedDate != DateOnly.MinValue)
{
    <h5>Sales on @selectedDate</h5>
}

<div class="form-group mb-3">
    <label for="dateFilter">Date Filter</label>
    <input type="date" class="form-control mb-3" id="dateFilter" @onchange="HandleFilterOnChange" />
</div>

<table class="table">
    <thead>
        <tr>
            <td>Rental Id</td>
            <td>Date</td>
            <td>Last Name</td>
            <td>First Name</td>
            <td>Equipment</td>
            <td>Rental Date</td>
            <td>Return Date</td>
            <td>Cost</td>
        </tr>
    </thead>
    <tbody>
        @if (rentalInformationList != null && rentalInformationList.Count > 0)
        {
            @foreach (Rental rental in rentalInformationList)
            {
                <tr>
                    <td>@rental.RentalId</td>
                    <td>@rental.RecordDate.ToString("d")</td>
                    <td>@getCustomerFromLookup(rental.CustomerId)?.LastName</td>
                    <td>@getCustomerFromLookup(rental.CustomerId)?.FirstName</td>
                    <td>@getEquipmentFromLookup(rental.EquipmentId)?.Name</td>
                    <td>@rental.RentalDate.ToString("d")</td>
                    <td>@rental.ReturnDate.ToString("d")</td>
                    <td class="text-end">@rental.Cost.ToString("###,###,###.00")</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="8">Nothing to load or still loading.</td>
            </tr>
        }
    </tbody>
    <tfoot>
        <h5 class="mt-3">Total : @Totals.ToString("###,###,###.00")</h5>
    </tfoot>
</table>
<p>@statusMsg</p>

@code {
    private List<Rental> rentalInformationList = new List<Rental>();
    private List<Models.RentalEquipment> equipmentLookup = new List<Models.RentalEquipment>();
    private List<Customer> custLookup = new List<Customer>();
    string statusMsg = String.Empty;
    private DateOnly? selectedDate;
    private double Totals = 0.0;

    private Customer? getCustomerFromLookup(int id)
    {
        return custLookup.FirstOrDefault(c => c.CustomerId == id);
    }

    private Models.RentalEquipment? getEquipmentFromLookup(int id)
    {
        return equipmentLookup.FirstOrDefault(e => e.EquipmentId == id);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RefreshList();
        }
        catch (Exception e)
        {
            statusMsg = "A problem has occurred while retrieving data.";
        }
    }

    protected async Task RefreshList(DateOnly? filter = null)
    {
        statusMsg = String.Empty;
        try
        {
            rentalInformationList = await DatabaseService.GetRentalInformationAsync(filter);
            equipmentLookup = await DatabaseService.GetEquipmentAsync();
            custLookup = await DatabaseService.GetCustomers();
            Totals = rentalInformationList.Sum(r => r.Cost);
        }
        catch (Exception e)
        {
            statusMsg = "A problem has occurred while retrieving data.";
        }
    }

    protected async Task HandleFilterOnChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out var date))
        {
            selectedDate = DateOnly.FromDateTime(date);
            await RefreshList(selectedDate);
        }
        else
        {
            // Handle invalid date input
            await RefreshList();
        }
        StateHasChanged();  // Ensure the UI updates after data is fetched
    }
}
