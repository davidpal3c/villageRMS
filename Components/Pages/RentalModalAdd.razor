<!-- Add New Rental -->
<div class="form-group">
    <label class="form-label mt-2" for="fn">Current Date</label>
    <input type="text" @bind="_currentDate" class="form-control" id="currentdate" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="ln">Customer</label>
    <input type="number" @bind="_customerId" class="form-control" id="customer" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="phone">Equipment</label>
    <input type="number" @bind="_equipmentId" class="form-control" id="equipment" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="email">Rental Date</label>
    <input type="text" @bind="_rentalDate"form-control" id="rentaldate" />
</div>
<div class="form-group">
    <label class="form-label mt-2" for="email">Return Date</label>
    <input type="text" @bind="_returnDate" class="form-control" id="returndate" />
</div>

<Button class="mt-3 btn btn-primary" Type="ButtonType.Button" @onclick="HandleClick">
    Submit
</Button>



@code {
    
    [Parameter] public EventCallback<List<string>> OnClickCallback { get; set; }

    private string? _currentDate;
    private int? _customerId;
    private int? _equipmentId;
    private string? _rentalDate;
    private string? _returnDate;
    private List<string> returnVal { get; set; } = new List<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    
    private async Task HandleClick()
    {
        returnVal.Clear();
        /*
        if (!string.IsNullOrEmpty(_currentDate)) returnVal.Add(_currentDate);
        if (!int.IsNullOrEmpty(_customerId)) returnVal.Add(_customerId);        
        if (!int.IsNullOrEmpty(_equipmentId)) returnVal.Add(_equipmentId);
        if (!string.IsNullOrEmpty(_rentalDate)) returnVal.Add(_rentalDate);
        if (!string.IsNullOrEmpty(_returnDate)) returnVal.Add(_returnDate);
        */
        await OnClickCallback.InvokeAsync(returnVal);
    }
    
}
