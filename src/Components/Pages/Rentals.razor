@page "/rentals"
@using Models
@using Settings
@inject Services.DatabaseService DatabaseService

<h1>Rentals</h1>
<p>@msg</p>
@if (@testMsg != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @testMsg
        <button type="button" class="closee" aria-label="Close" @onclick="CloseMessage">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (rentals_list.Count == 0)
{
    <p><em>There are no rental items at this time.</em></p>
}
else
{

    <div class="nav-header">
        <div>
            <form @onsubmit="FilterRentals">
                <input type="search" @bind="searchStr" class="search-field" placeholder="Search Rentals" @bind:event="oninput" @bind:after="FilterRentals" />
                <span class="span-label">Rental</span><input type="date" @bind="rend" class="search-field" placeholder="Rental Date" @bind:event="oninput" @bind:after="FilterRentals" />
                <span class="span-label">Return</span><input type="date" @bind="retd" class="search-field" placeholder="Return Date" @bind:event="oninput" @bind:after="FilterRentals" />
                <button type="submit" class="btn btn-dark"><i class="bi bi-search"></i></button>
            </form>
        </div>

        <div>
            <button type="submit" class="btn btn-success" @onclick="ShowRentalAddModal">
                <i class="bi bi-plus-lg"></i>
            </button>
        </div>

        <div>
            <button type="submit" class="btn btn-secondary" @onclick="RefreshList">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <Modal @ref="modal" />

    <table class="table new-table">
        <thead>
            <tr class="thead-tr">
                <th>ID</th>
                <th>Date</th>
                <th>Customer</th>
                <th>Equipment</th>
                <th>Rental Date</th>
                <th>Return Date</th>
                <th>Cost</th>
                <th>Edit/Delete</th>
            </tr>
        </thead>
        <tbody>
            @if(filteredData != null)
            {
                @foreach (Rental search in filteredData)
                {
                <tr>
                    <td>@search.RentalId</td>
                    <td>@search.CurrentDate</td>
                    <td>@cust_lookup.FirstOrDefault(c => c.CustomerId == search.CustomerId).FirstName @cust_lookup.FirstOrDefault(c => c.CustomerId == search.CustomerId).LastName</td>
                    @* <td>@search.CustomerName</td> *@
                    @* <td>@search.EquipmentName</td> *@
                    <td>@equip_lookup.FirstOrDefault(e => e.EquipmentId == search.EquipmentId).Name</td>
                    <td>@search.RentalDate</td>
                    <td>@search.ReturnDate</td>
                    <td>@search.Cost</td>
                    <td>
                        <button type="submit" class="btn btn-primary" @onclick="() => ShowRentalUpdateModal(search)">
                            <i class="bi bi-pencil-square"></i>
                        </button>

                            <button type="submit" class="btn btn-danger" @onclick="() => ShowDeleteConfirmationModal(search)">
                                <i class="bi bi-trash"></i>
                            </button>

                    </td>
                    </tr>
                }
            }
            else
            {
                @foreach (Rental rental in rentals_list)
                {
                    <tr>
                    <td>@rental.RentalId</td>
                    <td>@rental.CurrentDate</td>
                        <td>@cust_lookup.FirstOrDefault(c => c.CustomerId == rental.CustomerId).FirstName @cust_lookup.FirstOrDefault(c => c.CustomerId == rental.CustomerId).LastName</td>
                        @* <td>@search.CustomerName</td> *@
                        @* <td>@search.EquipmentName</td> *@
                        <td>@equip_lookup.FirstOrDefault(e => e.EquipmentId == rental.EquipmentId).Name</td>
                    <td>@rental.RentalDate</td>
                    <td>@rental.ReturnDate</td>
                    <td>@rental.Cost</td>
                    <td>
                        <button type="submit" class="btn btn-primary" @onclick="() => ShowRentalUpdateModal(rental)">
                            <i class="bi bi-pencil-square"></i>
                        </button>

                            <button type="submit" class="btn btn-danger" @onclick="() => ShowDeleteConfirmationModal(rental)">
                                <i class="bi bi-trash"></i>
                            </button>
                    </td>
                    </tr>
                }
                }
        </tbody>
    </table>
}

@code {
    private List<Rental> rentals_list = new List<Rental>();
    private List<Customer> cust_lookup = new List<Customer>();
    private List<RentalEquipment> equip_lookup = new List<RentalEquipment>();
    private Modal modal = default!;
    private bool showDeleteConfirmation = false;
    private string? testMsg;

    private string msg = String.Empty;

    private List<Rental>? filteredData = new List<Models.Rental>();
    private List<Rental>? result = new List<Rental>();
    private string? searchStr;
    private DateOnly? rend;
    private DateOnly? retd;
    private string? name;



    protected override async Task OnInitializedAsync()
    {
        if (await DatabaseService.isSuccessfulConnection())
        {

        }
        else
        {
            string apiUrl = $"{SystemSettings.ApiURL}:{SystemSettings.ApiURLPort}/test";
            //testMsg = "Open ssh tunnel or reconfigure connection string at MauiProgram.cs";
            testMsg = $"Test end point at {apiUrl} is unreachable.";
        }

        //custList = await DatabaseService.GetCustomers();
        await RefreshList();
    }

    private void CloseMessage()
    {
        testMsg = null;
    }


    private void FilterRentals()
    {
        if (rentals_list == null || !rentals_list.Any())
        {
            testMsg = "nothing";
            return;

        }


        result = new List<Models.Rental>();


        foreach (Models.Rental rental in rentals_list)
        {
            bool match = true;

            string custName = cust_lookup.FirstOrDefault(c => c.CustomerId == rental.CustomerId).FirstName + " " + cust_lookup.FirstOrDefault(c => c.CustomerId == rental.CustomerId).LastName;
            string equipName = equip_lookup.FirstOrDefault(e => e.EquipmentId == rental.EquipmentId).Name;

            /*
            if ((!string.IsNullOrEmpty(searchStr) &&
                !(rental.CustomerName.Contains(searchStr, StringComparison.OrdinalIgnoreCase) ||
                rental.EquipmentName.Contains(searchStr, StringComparison.OrdinalIgnoreCase))) || 
                (rend.ToString() != "" && !(rental.RentalDate == rend)) || 
                (retd.ToString() != "" && !(rental.ReturnDate == retd)))
            {
                match = false;
            }*/

            if ((!string.IsNullOrEmpty(searchStr) &&
                !(custName.Contains(searchStr, StringComparison.OrdinalIgnoreCase) ||
                equipName.Contains(searchStr, StringComparison.OrdinalIgnoreCase))) ||
                (rend.ToString() != "" && !(rental.RentalDate == rend)) ||
                (retd.ToString() != "" && !(rental.ReturnDate == retd)))
            {
                match = false;
            }

            if (match)
            {
                result.Add(rental);
            }

        }
        filteredData = result;
    }

    private void FilterRentalsByRentalDate()
    {
        if (rentals_list == null || !rentals_list.Any())
        {
            testMsg = "nothing";
            return;

        }


        result = new List<Models.Rental>();


        foreach (Models.Rental rental in rentals_list)
        {
            bool match = true;

            if (rend.ToString() != "" &&
                !(rental.RentalDate == rend))
            {
                match = false;
            }

            if (match)
            {
                result.Add(rental);
            }

        }
        filteredData = result;
    }

    private async Task RefreshList()
    {
        try
        {
            rentals_list = await DatabaseService.GetRentals();
            cust_lookup = await DatabaseService.GetCustomers();
            equip_lookup = await DatabaseService.GetRentalEquipmentAsync();
            filteredData = null;
        }
        catch (Exception e)
        {
            testMsg = $"Error during refresh: {e.Message}";
        }
    }

    


    //AddModal start
    private async Task ShowRentalAddModal()
    {
        try
        {
            var parameters = new Dictionary<string, object>
            {
                { "OnClickCallback", EventCallback.Factory.Create<List<object>>(this, TestSuccessCallbackAdd) }
            };

            await modal.ShowAsync<RentalModalAdd>(title: "New Rental", parameters: parameters);

        }
        catch(Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
    }


    private async Task TestSuccessCallbackAdd(List<object> rentalData)
    {
        try
        {
            testMsg = $"New rental data added successfully!";
            await DatabaseService.AddRental(rentalData);
            await RefreshList();
            await modal.HideAsync();
        }
        catch (Exception e)
        {
            testMsg = $"An error occurred: adding{e.Message}";
        }
    }



    private async Task ShowRentalUpdateModal(Rental rental)
    {
        try
        {
            var parameters = new Dictionary<string, object>
            {
                { "Rental", rental },
                { "OnClickCallback", EventCallback.Factory.Create<Rental>(this, TestSuccessCallbackUpdate)},
                { "customerOptions", cust_lookup },
                { "equipmentOptions", equip_lookup }
            };

            await modal.ShowAsync<UpdateRentalModal>(title: "Update Rental", parameters: parameters);
        }
        catch(Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
    }



    private async Task TestSuccessCallbackUpdate(Rental updatedRental)
    {
        try
        {

            testMsg = $"Rental information (RentalID: {updatedRental.RentalId}) updated successfully";

            await DatabaseService.UpdateRental(updatedRental);
            await RefreshList();
            await modal.HideAsync();
        }
        catch (Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
    }


    private async Task ShowDeleteConfirmationModal(Rental rental)
    {
        showDeleteConfirmation = true;

        var parameters = new Dictionary<string, object>
        {
            { "Rental", rental },
            { "OnClickCallback", EventCallback.Factory.Create<(Rental, bool)>(this, ConfirmCallbackDelete) }
        };

        await modal.ShowAsync<RentalModalDelete>(title: "Delete Rental", parameters: parameters);
    }



    private async Task ConfirmCallbackDelete((Rental rental, bool confirmed) args)
    {
        var (rental, confirmed) = args;

        try
        {

            if (confirmed)
            {
                await DatabaseService.DeleteRental(rental);
                testMsg = $"{rental.RentalId} deleted successfully";
                await RefreshList();
            }
            else
            {
                testMsg = "Rental deletion was canceled.";
                await RefreshList();
            }

            await modal.HideAsync();

        }
        catch (Exception e)
        {
            testMsg = $"An error occurred: {e.Message}";
        }
        finally
        {
            showDeleteConfirmation = false;
        }
    }


}
