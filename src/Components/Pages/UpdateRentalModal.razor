@using Models
@using Services
@using Microsoft.AspNetCore.Components.Forms
@inject Services.DatabaseService DatabaseService

<!-- Update Rental -->

<EditForm Model="rental" OnValidSubmit="HandleClick" >
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="form-label mt-2" for="rentalid">Rental Id</label>
        <InputNumber @bind-Value="rental.RentalId" class="form-control" id="rentalid" readonly/>
        <ValidationMessage For="@(() => rental.RentalId)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="currentdate">Current Date</label>
        <InputDate @bind-Value="rental.CurrentDate" class="form-control" id="currentdate" />
        <ValidationMessage For="@(() => rental.CurrentDate)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="customer">Customer</label>
       
        <select class="form-control" @bind="rental.CustomerId" placeholder="Select a customer" id="customer" @onclick="CustomerOptions">
            <option  disabled>Select Customer</option>
            @if(customerOptions.Count > 0)
            {
                @foreach (Customer c in customerOptions)
                {
                    <option value="@c.CustomerId">@c.FirstName @c.LastName</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => rental.CustomerId)" />
    </div>
 

    <div class="form-group">
        <label class="form-label mt-2" for="equipment">Equipment</label>
        <select class="form-control" @bind="rental.EquipmentId" placeholder="Select Equipment" id="equipment" @onclick="EquipmentOptions">
            <option disabled>Select Equipment</option>
            @if(customerOptions.Count > 0)
            {
                @foreach (RentalEquipment re in equipmentOptions)
                {
                <option value="@re.EquipmentId">@re.Name</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => rental.EquipmentId)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="rentaldate">Rental Date</label>
        <InputDate @bind-Value="rental.RentalDate" class="form-control" id="rentaldate" />
        <ValidationMessage For="@(() => rental.RentalDate)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="returndate">Return Date</label>
        <InputDate @bind-Value="rental.ReturnDate" class="form-control" id="returndate" />
        <ValidationMessage For="@(() => rental.ReturnDate)" />
    </div>

    <div class="form-group">
        <label class="form-label mt-2" for="cost">Cost</label>
        <InputNumber @bind-Value="rental.Cost" class="form-control" id="cost" />
        <ValidationMessage For="@(() => rental.Cost)" />
    </div>

    <Button class="mt-3 btn btn-primary" Type="ButtonType.Submit">
        Update Rental
    </Button>
</EditForm>

@code {
    private Rental rental;
    private string sel = "";
    private string? testMsg;


    [Parameter] public Rental Rental { get; set; } = new Rental();
    [Parameter] public EventCallback<Rental> OnClickCallback { get; set; }


    private List<Models.Customer> customerOptions = new List<Customer>();
    private List<Models.RentalEquipment> equipmentOptions = new List<RentalEquipment>();


    protected override async Task OnInitializedAsync()
    {
        
    }

    protected async Task LoadOptions()
    {
        CustomerOptions();
        EquipmentOptions();
    }

    protected override void OnParametersSet()
    {
        rental = Rental;
        base.OnParametersSet();
    }

    private async Task HandleClick()
    {
        try
        {
            await OnClickCallback.InvokeAsync(rental);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task CustomerOptions()
    {
        try
        {
            customerOptions = await DatabaseService.GetCustomers();
            testMsg = "test";

        }
        catch (Exception e)
        {
            testMsg = $"Error loading options: {e.Message}";
        }
    }

    private async Task EquipmentOptions()
    {
        try
        {
            equipmentOptions = await DatabaseService.GetRentalEquipment();

        }
        catch (Exception e)
        {
            testMsg = $"Error loading options: {e.Message}";
        }
    }

}